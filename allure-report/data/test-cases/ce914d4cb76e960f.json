{
  "uid" : "ce914d4cb76e960f",
  "name" : "Testing 'has_subpattern' (part 2) function",
  "fullName" : "kyu_6.string_subpattern_recognition_2.test_has_subpattern.HasSubpatternTestCase#test_has_subpattern",
  "historyId" : "ebccba1809989898eb718f4c9be6ac5c",
  "time" : {
    "start" : 1586121729346,
    "stop" : 1586121729348,
    "duration" : 2
  },
  "description" : "\n        Verify that 'has_subpattern' function to returns\n        either true/True or false/False if a string can be\n        seen as the repetition of a simpler/shorter subpattern or not.\n\n        1. if a subpattern has been used, it will be repeated\n        at least twice, meaning the subpattern has to be\n        shorter than the original string;\n\n        2. the strings you will be given might or might not\n        be created repeating a given subpattern, then\n        shuffling the result.\n        :return:\n        ",
  "descriptionHtml" : "<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p></p>",
  "status" : "broken",
  "statusMessage" : "TypeError: 'module' object is not callable",
  "statusTrace" : "self = <kyu_6.string_subpattern_recognition_2.test_has_subpattern.HasSubpatternTestCase testMethod=test_has_subpattern>\n\n    def test_has_subpattern(self):\n        \"\"\"\n        Verify that 'has_subpattern' function to returns\n        either true/True or false/False if a string can be\n        seen as the repetition of a simpler/shorter subpattern or not.\n    \n        1. if a subpattern has been used, it will be repeated\n        at least twice, meaning the subpattern has to be\n        shorter than the original string;\n    \n        2. the strings you will be given might or might not\n        be created repeating a given subpattern, then\n        shuffling the result.\n        :return:\n        \"\"\"\n    \n        allure.dynamic.title(\"Testing 'has_subpattern' (part 2) function\")\n        allure.dynamic.severity(allure.severity_level.NORMAL)\n        allure.dynamic.description_html('<h3>Codewars badge:</h3>'\n                                        '<img src=\"https://www.codewars.com/users/myFirstCode'\n                                        '/badges/large\">'\n                                        '<h3>Test Description:</h3>'\n                                        \"<p></p>\")\n    \n        with allure.step(\"Pass the string and verify the output\"):\n            test_data = [\n                (\"a\", False),\n                (\"aaaa\", True),\n                (\"abcd\", False),\n                (\"babababababababa\", True),\n                (\"ababababa\", False),\n                (\"123a123a123a\", True),\n                (\"123A123a123a\", False),\n                (\"12aa13a21233\", True),\n                (\"12aa13a21233A\", False),\n                (\"abcdabcaccd\", False),\n                (\"w9TkPyHgTygqGTCBnL94FFa5q1uvyBzCOFdzFGl3439FCsk59yjq\"\n                 \"A7nT9g3N94nTzFkCy31AkN2Hdd2Fmyn5VFGCBN5n931mkaw14bXw\"\n                 \"Aywzw1TwyoAB2yLdydPGALFv51Bj0Vnnd1VayBTsun1TV31yPmbj\"\n                 \"PNaq1kuXoVGkokjTTd2LFbOV7n2XTayLnbBsTFmsdHuVaykF0V23\"\n                 \"w3slOymC1OF4akgo5yGLFsGF139oTG7GsuuvVPwTy3dm5oglTlF4\"\n                 \"FlqkNyFVFGvm1VuljHggH74nFwCFLy0n0qALdy0o4yyw592BovN7\"\n                 \"Bvy1AGwVngklvBGB204H2BTXjAykyXBFja5ov4jTkTGybBnATCvO\"\n                 \"llwGClTmvw9os9TyH41vvjmkVXdTw3aysnTBPTvvgmA51wvkn1T7\"\n                 \"1OyyGLPgV9LdmqyldTwbdu0TqTH377kOynv3Byd0vVlynTkAyyj1\"\n                 \"1dqyv5FN1TsTyv5Gajgvd0Xn2dCjvFXq3lykg7soolyksllVGNkV\"\n                 \"3VFLqwvnyBPH1T1NoBuzLnmlC5lO7FlHFwNVT1AuGT2zNsdVodnl\"\n                 \"TdnnnwOdNTg5qH0PPXl5FljvOu0vyqBFXLTz9uvAzP5b1lTkHG5a\"\n                 \"TqzzwCOkwl0dBVGjbkdFFy4TljFaTGBdAVGT1luFVnByHvn2XvAB\"\n                 \"lAOGw77BjTg1k5yV17ddCmP14GvL2P5XBTkTw95v3ksv5kqkyuCy\"\n                 \"X430BAy2AB5NlC5wXbOv4zgVl9GLb5wBzaNdT7vyzslPBkws5Nw2\"\n                 \"w0nvN1V5dG4qzLX7dsV1ujGu0lzVbmPkVB59sVVoVFBHPyOuygO0\"\n                 \"ClwmA2bGkHLVayBb5Cayl2m9w4TBgkGbTw0lHB2VG5NnFwyF17Gk\"\n                 \"Tn5TdH7HVnlyvG51do9k35zO4aqmPBTwnXu5wdBvvTPdL715ln4o\"\n                 \"jGVTTlgks119kuCV3Ta5vLa7nqmdolmjPG5wqGynXG2n1XTCbz10\"\n                 \"BadOFvTbbgHOnywVG50wwNnzObkddNF5BGzobX\", True)\n            ]\n    \n            for data in test_data:\n                print_log(string=data[0], expected=data[1])\n>               self.assertEqual(data[1], has_subpattern(data[0]))\n\nkyu_6\\string_subpattern_recognition_2\\test_has_subpattern.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nstring = 'aaaa'\n\n    def has_subpattern(string: str) -> bool:\n        \"\"\"\n        String subpattern recognition II\n    \n        if a subpattern has been used, it will be repeated at least twice,\n        meaning the subpattern has to be shorter than the original string;\n    \n        the strings you will be given might or might not be created\n        repeating a given subpattern, then shuffling the result.\n    \n        :param string:\n        :return:\n        \"\"\"\n    \n        primes: Set[int] = set()\n        length = len(string)\n        char_dict: Dict[str, int] = dict()\n    \n        for char in string:\n    \n            if char not in char_dict:\n                char_dict[char] = string.count(char)\n    \n                if char_dict[char] == 1:\n                    return False\n    \n>               if char_dict[char] in primes or is_prime(char_dict[char]):\nE               TypeError: 'module' object is not callable\n\nkyu_6\\string_subpattern_recognition_2\\has_subpattern.py:35: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1586121729345,
      "stop" : 1586121729345,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n        Verify that 'has_subpattern' function to returns\n        either true/True or false/False if a string can be\n        seen as the repetition of a simpler/shorter subpattern or not.\n\n        1. if a subpattern has been used, it will be repeated\n        at least twice, meaning the subpattern has to be\n        shorter than the original string;\n\n        2. the strings you will be given might or might not\n        be created repeating a given subpattern, then\n        shuffling the result.\n        :return:\n        ",
    "descriptionHtml" : "<h3>Codewars badge:</h3><img src=\"https://www.codewars.com/users/myFirstCode/badges/large\"><h3>Test Description:</h3><p></p>",
    "status" : "broken",
    "statusMessage" : "TypeError: 'module' object is not callable",
    "statusTrace" : "self = <kyu_6.string_subpattern_recognition_2.test_has_subpattern.HasSubpatternTestCase testMethod=test_has_subpattern>\n\n    def test_has_subpattern(self):\n        \"\"\"\n        Verify that 'has_subpattern' function to returns\n        either true/True or false/False if a string can be\n        seen as the repetition of a simpler/shorter subpattern or not.\n    \n        1. if a subpattern has been used, it will be repeated\n        at least twice, meaning the subpattern has to be\n        shorter than the original string;\n    \n        2. the strings you will be given might or might not\n        be created repeating a given subpattern, then\n        shuffling the result.\n        :return:\n        \"\"\"\n    \n        allure.dynamic.title(\"Testing 'has_subpattern' (part 2) function\")\n        allure.dynamic.severity(allure.severity_level.NORMAL)\n        allure.dynamic.description_html('<h3>Codewars badge:</h3>'\n                                        '<img src=\"https://www.codewars.com/users/myFirstCode'\n                                        '/badges/large\">'\n                                        '<h3>Test Description:</h3>'\n                                        \"<p></p>\")\n    \n        with allure.step(\"Pass the string and verify the output\"):\n            test_data = [\n                (\"a\", False),\n                (\"aaaa\", True),\n                (\"abcd\", False),\n                (\"babababababababa\", True),\n                (\"ababababa\", False),\n                (\"123a123a123a\", True),\n                (\"123A123a123a\", False),\n                (\"12aa13a21233\", True),\n                (\"12aa13a21233A\", False),\n                (\"abcdabcaccd\", False),\n                (\"w9TkPyHgTygqGTCBnL94FFa5q1uvyBzCOFdzFGl3439FCsk59yjq\"\n                 \"A7nT9g3N94nTzFkCy31AkN2Hdd2Fmyn5VFGCBN5n931mkaw14bXw\"\n                 \"Aywzw1TwyoAB2yLdydPGALFv51Bj0Vnnd1VayBTsun1TV31yPmbj\"\n                 \"PNaq1kuXoVGkokjTTd2LFbOV7n2XTayLnbBsTFmsdHuVaykF0V23\"\n                 \"w3slOymC1OF4akgo5yGLFsGF139oTG7GsuuvVPwTy3dm5oglTlF4\"\n                 \"FlqkNyFVFGvm1VuljHggH74nFwCFLy0n0qALdy0o4yyw592BovN7\"\n                 \"Bvy1AGwVngklvBGB204H2BTXjAykyXBFja5ov4jTkTGybBnATCvO\"\n                 \"llwGClTmvw9os9TyH41vvjmkVXdTw3aysnTBPTvvgmA51wvkn1T7\"\n                 \"1OyyGLPgV9LdmqyldTwbdu0TqTH377kOynv3Byd0vVlynTkAyyj1\"\n                 \"1dqyv5FN1TsTyv5Gajgvd0Xn2dCjvFXq3lykg7soolyksllVGNkV\"\n                 \"3VFLqwvnyBPH1T1NoBuzLnmlC5lO7FlHFwNVT1AuGT2zNsdVodnl\"\n                 \"TdnnnwOdNTg5qH0PPXl5FljvOu0vyqBFXLTz9uvAzP5b1lTkHG5a\"\n                 \"TqzzwCOkwl0dBVGjbkdFFy4TljFaTGBdAVGT1luFVnByHvn2XvAB\"\n                 \"lAOGw77BjTg1k5yV17ddCmP14GvL2P5XBTkTw95v3ksv5kqkyuCy\"\n                 \"X430BAy2AB5NlC5wXbOv4zgVl9GLb5wBzaNdT7vyzslPBkws5Nw2\"\n                 \"w0nvN1V5dG4qzLX7dsV1ujGu0lzVbmPkVB59sVVoVFBHPyOuygO0\"\n                 \"ClwmA2bGkHLVayBb5Cayl2m9w4TBgkGbTw0lHB2VG5NnFwyF17Gk\"\n                 \"Tn5TdH7HVnlyvG51do9k35zO4aqmPBTwnXu5wdBvvTPdL715ln4o\"\n                 \"jGVTTlgks119kuCV3Ta5vLa7nqmdolmjPG5wqGynXG2n1XTCbz10\"\n                 \"BadOFvTbbgHOnywVG50wwNnzObkddNF5BGzobX\", True)\n            ]\n    \n            for data in test_data:\n                print_log(string=data[0], expected=data[1])\n>               self.assertEqual(data[1], has_subpattern(data[0]))\n\nkyu_6\\string_subpattern_recognition_2\\test_has_subpattern.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nstring = 'aaaa'\n\n    def has_subpattern(string: str) -> bool:\n        \"\"\"\n        String subpattern recognition II\n    \n        if a subpattern has been used, it will be repeated at least twice,\n        meaning the subpattern has to be shorter than the original string;\n    \n        the strings you will be given might or might not be created\n        repeating a given subpattern, then shuffling the result.\n    \n        :param string:\n        :return:\n        \"\"\"\n    \n        primes: Set[int] = set()\n        length = len(string)\n        char_dict: Dict[str, int] = dict()\n    \n        for char in string:\n    \n            if char not in char_dict:\n                char_dict[char] = string.count(char)\n    \n                if char_dict[char] == 1:\n                    return False\n    \n>               if char_dict[char] in primes or is_prime(char_dict[char]):\nE               TypeError: 'module' object is not callable\n\nkyu_6\\string_subpattern_recognition_2\\has_subpattern.py:35: TypeError",
    "steps" : [ {
      "name" : "Pass the string and verify the output",
      "time" : {
        "start" : 1586121729347,
        "stop" : 1586121729347,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "TypeError: 'module' object is not callable\n",
      "statusTrace" : "  File \"C:\\Users\\superadmin\\Documents\\GitHub\\codewars\\kyu_6\\string_subpattern_recognition_2\\test_has_subpattern.py\", line 87, in test_has_subpattern\n    self.assertEqual(data[1], has_subpattern(data[0]))\n  File \"C:\\Users\\superadmin\\Documents\\GitHub\\codewars\\kyu_6\\string_subpattern_recognition_2\\has_subpattern.py\", line 35, in has_subpattern\n    if char_dict[char] in primes or is_prime(char_dict[char]):\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ {
      "uid" : "10fb43e904bb502a",
      "name" : "stdout",
      "source" : "10fb43e904bb502a.txt",
      "type" : "text/plain",
      "size" : 74
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1586121729447,
      "stop" : 1586121729448,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "epic",
    "value" : "6 kyu"
  }, {
    "name" : "story",
    "value" : "String subpattern recognition II"
  }, {
    "name" : "parentSuite",
    "value" : "Novice"
  }, {
    "name" : "subSuite",
    "value" : "Unit Tests"
  }, {
    "name" : "feature",
    "value" : "String"
  }, {
    "name" : "suite",
    "value" : "Advanced Language Features"
  }, {
    "name" : "host",
    "value" : "DESKTOP-RJASUD2"
  }, {
    "name" : "thread",
    "value" : "1160-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "kyu_6.string_subpattern_recognition_2.test_has_subpattern"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Source/Kata",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "ce914d4cb76e960f.json",
  "parameterValues" : [ ]
}