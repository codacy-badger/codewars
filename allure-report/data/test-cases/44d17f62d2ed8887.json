{
  "uid" : "44d17f62d2ed8887",
  "name" : "Testing flatten function",
  "fullName" : "kyu_5.flatten.test_flatten.FlattenTestCase#test_flatten",
  "historyId" : "7a974b0f364ee0a07e53a12f012266eb",
  "time" : {
    "start" : 1578801841701,
    "stop" : 1578801841704,
    "duration" : 3
  },
  "description" : "\n\t\tFor this exercise you will create a global flatten method.\n\t\tThe method takes in any number of arguments and flattens\n\t\tthem into a single array. If any of the arguments passed in\n\t\tare an array then the individual objects within the array\n\t\twill be flattened so that they exist at the same level as\n\t\tthe other arguments. Any nested arrays, no matter how deep,\n\t\tshould be flattened into the single array result.\n\n\t\tThe following are examples of how this function would be\n\t\tused and what the expected results would be:\n\n\t\tflatten(1, [2, 3], 4, 5, [6, [7]]) # returns [1, 2, 3, 4, 5, 6, 7]\n\t\tflatten('a', ['b', 2], 3, None, [[4], ['c']]) # returns ['a', 'b', 2, 3, None, 4, 'c']\n\t\t:return:\n\t\t",
  "descriptionHtml" : "<pre><code>\tFor this exercise you will create a global flatten method.\n\tThe method takes in any number of arguments and flattens\n\tthem into a single array. If any of the arguments passed in\n\tare an array then the individual objects within the array\n\twill be flattened so that they exist at the same level as\n\tthe other arguments. Any nested arrays, no matter how deep,\n\tshould be flattened into the single array result.\n\n\tThe following are examples of how this function would be\n\tused and what the expected results would be:\n\n\tflatten(1, [2, 3], 4, 5, [6, [7]]) # returns [1, 2, 3, 4, 5, 6, 7]\n\tflatten('a', ['b', 2], 3, None, [[4], ['c']]) # returns ['a', 'b', 2, 3, None, 4, 'c']\n\t:return:\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1578801841700,
      "stop" : 1578801841700,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "\n\t\tFor this exercise you will create a global flatten method.\n\t\tThe method takes in any number of arguments and flattens\n\t\tthem into a single array. If any of the arguments passed in\n\t\tare an array then the individual objects within the array\n\t\twill be flattened so that they exist at the same level as\n\t\tthe other arguments. Any nested arrays, no matter how deep,\n\t\tshould be flattened into the single array result.\n\n\t\tThe following are examples of how this function would be\n\t\tused and what the expected results would be:\n\n\t\tflatten(1, [2, 3], 4, 5, [6, [7]]) # returns [1, 2, 3, 4, 5, 6, 7]\n\t\tflatten('a', ['b', 2], 3, None, [[4], ['c']]) # returns ['a', 'b', 2, 3, None, 4, 'c']\n\t\t:return:\n\t\t",
    "status" : "passed",
    "steps" : [ {
      "name" : "Enter test data #1 and verify the output",
      "time" : {
        "start" : 1578801841702,
        "stop" : 1578801841702,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter test data #2 and verify the output",
      "time" : {
        "start" : 1578801841702,
        "stop" : 1578801841702,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter test data #3 and verify the output",
      "time" : {
        "start" : 1578801841702,
        "stop" : 1578801841702,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter test data #4 and verify the output",
      "time" : {
        "start" : 1578801841703,
        "stop" : 1578801841703,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "Enter test data #5 and verify the output",
      "time" : {
        "start" : 1578801841703,
        "stop" : 1578801841703,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "fe36334fe5c9f0c",
      "name" : "stdout",
      "source" : "fe36334fe5c9f0c.txt",
      "type" : "text/plain",
      "size" : 352
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 5,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false
  },
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1578801841707,
      "stop" : 1578801841707,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "parentSuite",
    "value" : "Novice"
  }, {
    "name" : "story",
    "value" : "flatten()"
  }, {
    "name" : "subSuite",
    "value" : "Unit Tests"
  }, {
    "name" : "feature",
    "value" : "Lists"
  }, {
    "name" : "epic",
    "value" : "5 kyu"
  }, {
    "name" : "suite",
    "value" : "Algorithms"
  }, {
    "name" : "host",
    "value" : "DESKTOP-RJASUD2"
  }, {
    "name" : "thread",
    "value" : "3656-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "kyu_5.flatten.test_flatten"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "44d17f62d2ed8887.json",
  "parameterValues" : [ ]
}